import { 
  users, 
  reservoirs, 
  waterAllocations, 
  waterRequests, 
  notifications,
  type User, 
  type InsertUser,
  type Reservoir,
  type InsertReservoir,
  type WaterAllocation,
  type InsertWaterAllocation,
  type WaterRequest,
  type InsertWaterRequest,
  type Notification,
  type InsertNotification
} from "@shared/schema";

export interface IStorage {
  // User operations
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  async getAllUsers(): Promise<User[]> {
    return Array.from(this.users.values());
  }
  createUser(user: InsertUser): Promise<User>;
  
  // Reservoir operations
  getAllReservoirs(): Promise<Reservoir[]>;
  getReservoir(id: number): Promise<Reservoir | undefined>;
  createReservoir(reservoir: InsertReservoir): Promise<Reservoir>;
  updateReservoirLevel(id: number, level: number): Promise<Reservoir | undefined>;
  
  // Water allocation operations
  getAllocations(userId: number): Promise<WaterAllocation[]>;
  getAllocationsByReservoir(reservoirId: number): Promise<WaterAllocation[]>;
  createAllocation(allocation: InsertWaterAllocation): Promise<WaterAllocation>;
  updateAllocationUsage(id: number, used: number): Promise<WaterAllocation | undefined>;
  
  // Water request operations
  getUserRequests(userId: number): Promise<WaterRequest[]>;
  getAllRequests(): Promise<WaterRequest[]>;
  createRequest(request: InsertWaterRequest): Promise<WaterRequest>;
  updateRequestStatus(id: number, status: string, notes?: string): Promise<WaterRequest | undefined>;
  
  // Notification operations
  getUserNotifications(userId: number): Promise<Notification[]>;
  createNotification(notification: InsertNotification): Promise<Notification>;
  markNotificationAsRead(id: number): Promise<Notification | undefined>;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private reservoirs: Map<number, Reservoir>;
  private waterAllocations: Map<number, WaterAllocation>;
  private waterRequests: Map<number, WaterRequest>;
  private notifications: Map<number, Notification>;
  
  private userIdCounter: number;
  private reservoirIdCounter: number;
  private allocationIdCounter: number;
  private requestIdCounter: number;
  private notificationIdCounter: number;

  constructor() {
    this.users = new Map();
    this.reservoirs = new Map();
    this.waterAllocations = new Map();
    this.waterRequests = new Map();
    this.notifications = new Map();
    
    this.userIdCounter = 1;
    this.reservoirIdCounter = 1;
    this.allocationIdCounter = 1;
    this.requestIdCounter = 1;
    this.notificationIdCounter = 1;
    
    // Initialize with some sample reservoirs
    this.initializeData();
  }
  
  private initializeData() {
    // Create some reservoirs
    this.createReservoir({
      name: "Main Reservoir",
      capacity: 100000,
      currentLevel: 78000,
      lastUpdated: new Date()
    });
    
    this.createReservoir({
      name: "North Basin",
      capacity: 50000,
      currentLevel: 32000,
      lastUpdated: new Date()
    });
    
    this.createReservoir({
      name: "East Basin",
      capacity: 30000,
      currentLevel: 27600,
      lastUpdated: new Date()
    });
  }

  // User operations
  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
  }
    return Array.from(this.users.values()).find(
      (user) => user.username === username
    );
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.userIdCounter++;
    const user: User = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }
  
  // Reservoir operations
  async getAllReservoirs(): Promise<Reservoir[]> {
    return Array.from(this.reservoirs.values());
  }
  
  async getReservoir(id: number): Promise<Reservoir | undefined> {
    return this.reservoirs.get(id);
  }
  
  async createReservoir(insertReservoir: InsertReservoir): Promise<Reservoir> {
    const id = this.reservoirIdCounter++;
    const reservoir: Reservoir = { ...insertReservoir, id };
    this.reservoirs.set(id, reservoir);
    return reservoir;
  }
  
  async updateReservoirLevel(id: number, level: number): Promise<Reservoir | undefined> {
    const reservoir = this.reservoirs.get(id);
    if (!reservoir) return undefined;
    
    const updated: Reservoir = {
      ...reservoir,
      currentLevel: level,
      lastUpdated: new Date()
    };
    
    this.reservoirs.set(id, updated);
    return updated;
  }
  
  // Water allocation operations
  async getAllocations(userId: number): Promise<WaterAllocation[]> {
    return Array.from(this.waterAllocations.values())
      .filter(allocation => allocation.userId === userId);
  }
  
  async getAllocationsByReservoir(reservoirId: number): Promise<WaterAllocation[]> {
    return Array.from(this.waterAllocations.values())
      .filter(allocation => allocation.reservoirId === reservoirId);
  }
  
  async createAllocation(insertAllocation: InsertWaterAllocation): Promise<WaterAllocation> {
    const id = this.allocationIdCounter++;
    const allocation: WaterAllocation = { ...insertAllocation, id };
    this.waterAllocations.set(id, allocation);
    return allocation;
  }
  
  async updateAllocationUsage(id: number, used: number): Promise<WaterAllocation | undefined> {
    const allocation = this.waterAllocations.get(id);
    if (!allocation) return undefined;
    
    const updated: WaterAllocation = {
      ...allocation,
      used
    };
    
    this.waterAllocations.set(id, updated);
    return updated;
  }
  
  // Water request operations
  async getUserRequests(userId: number): Promise<WaterRequest[]> {
    return Array.from(this.waterRequests.values())
      .filter(request => request.userId === userId)
      .sort((a, b) => b.requestDate.getTime() - a.requestDate.getTime());
  }
  
  async getAllRequests(): Promise<WaterRequest[]> {
    return Array.from(this.waterRequests.values())
      .sort((a, b) => b.requestDate.getTime() - a.requestDate.getTime());
  }
  
  async createRequest(insertRequest: InsertWaterRequest): Promise<WaterRequest> {
    const id = this.requestIdCounter++;
    const request: WaterRequest = { ...insertRequest, id };
    this.waterRequests.set(id, request);
    return request;
  }
  
  async updateRequestStatus(id: number, status: string, notes?: string): Promise<WaterRequest | undefined> {
    const request = this.waterRequests.get(id);
    if (!request) return undefined;
    
    const updated: WaterRequest = {
      ...request,
      status,
      responseDate: new Date(),
      notes: notes || request.notes
    };
    
    this.waterRequests.set(id, updated);
    return updated;
  }
  
  // Notification operations
  async getUserNotifications(userId: number): Promise<Notification[]> {
    return Array.from(this.notifications.values())
      .filter(notification => notification.userId === userId)
      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());
  }
  
  async createNotification(insertNotification: InsertNotification): Promise<Notification> {
    const id = this.notificationIdCounter++;
    const notification: Notification = { ...insertNotification, id };
    this.notifications.set(id, notification);
    return notification;
  }
  
  async markNotificationAsRead(id: number): Promise<Notification | undefined> {
    const notification = this.notifications.get(id);
    if (!notification) return undefined;
    
    const updated: Notification = {
      ...notification,
      isRead: true
    };
    
    this.notifications.set(id, updated);
    return updated;
  }
}

export const storage = new MemStorage();
